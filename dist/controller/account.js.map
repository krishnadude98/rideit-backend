{"version":3,"sources":["../../src/controller/account.js"],"names":["bcrypt","require","jwt","config","db","api","get","req","res","status","send","user","post","Account","findOne","email","body","emailExist","salt","genSaltSync","hash","hashSync","password","account","name","savedUser","save","json","message","err","validatePassword","compareSync","token","sign","_id","TokenSecret","header"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAGA;;;;AACA;;;;;;;;AAHA,IAAMA,SAASC,QAAQ,UAAR,CAAf;AACA,IAAMC,MAAMD,QAAQ,cAAR,CAAZ;;kBAQe,gBAAoB;AAAA,MAAjBE,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;;AAEA;AACAA,MAAIC,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,QAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAMJ,IAAII,IAAZ,EAArB;AACD,GAFD;;AAIA;AACAN,MAAIO,IAAJ,CAAS,WAAT;AAAA,wEAAqB,iBAAeL,GAAf,EAAoBC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGKK,kBAAQC,OAAR,CAAgB,EAACC,OAAMR,IAAIS,IAAJ,CAASD,KAAhB,EAAhB,CAHL;;AAAA;AAGbE,wBAHa;;AAAA,mBAIhBA,UAJgB;AAAA;AAAA;AAAA;;AAAA,+CAKVT,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CALU;;AAAA;;AAQnB;AACIQ,kBATe,GASRlB,OAAOmB,WAAP,CAAmB,EAAnB,CATQ;AAUfC,kBAVe,GAURpB,OAAOqB,QAAP,CAAgBd,IAAIS,IAAJ,CAASM,QAAzB,EAAmCJ,IAAnC,CAVQ;AAYdK,qBAZc,GAYL,IAAIV,iBAAJ,CAAY;AACvBW,sBAAKjB,IAAIS,IAAJ,CAASQ,IADS;AAEvBF,0BAASF,IAFc;AAGvBL,uBAAMR,IAAIS,IAAJ,CAASD;AAHQ,eAAZ,CAZK;;;AAmBlB,kBAAI;AACIU,yBADJ,GACeF,QAAQG,IAAR,EADf;;AAEFlB,oBAAImB,IAAJ,CAAS,EAACC,SAAQ,wBAAT,EAAT;AACD,eAHD,CAGC,OAAMC,GAAN,EAAU;AACTrB,oBAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBmB,GAArB;AACD;;AAxBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA;;AA4BAxB,MAAIO,IAAJ,CAAS,QAAT;AAAA,wEAAkB,kBAAOL,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEEK,kBAAQC,OAAR,CAAgB,EAACC,OAAMR,IAAIS,IAAJ,CAASD,KAAhB,EAAhB,CAFF;;AAAA;AAEVJ,kBAFU;;AAAA,kBAGZA,IAHY;AAAA;AAAA;AAAA;;AAAA,gDAIPH,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB,CAJO;;AAAA;AAMhB;AACMoB,8BAPU,GAOQ9B,OAAO+B,WAAP,CAAmBxB,IAAIS,IAAJ,CAASM,QAA5B,EAAsCX,KAAKW,QAA3C,CAPR;;AAAA,kBAQZQ,gBARY;AAAA;AAAA;AAAA;;AAAA,gDASPtB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mBAArB,CATO;;AAAA;AAWhB;AACMsB,mBAZU,GAYH9B,IAAI+B,IAAJ,CAAS,EAACC,KAAIvB,KAAKuB,GAAV,EAAT,EAAwB/B,OAAOgC,WAA/B,CAZG;;AAahB3B,kBAAI4B,MAAJ,CAAW,YAAX,EAAwBJ,KAAxB,EAA+BtB,IAA/B,CAAoCsB,KAApC;;AAbgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAO3B,GAAP;AACD,C","file":"account.js","sourcesContent":["import  mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Account from '../model/account';\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nimport config from '../config';\nimport middleWare from '../middleware/authMiddleware';\n\n\n\n\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  // '/v1/account'\n  api.get('/', (req, res) => {\n    res.status(200).send({ user: req.user });\n  });\n\n  // '/v1/account/register'\n  api.post('/register',async function(req, res){\n\n\n    const emailExist= await Account.findOne({email:req.body.email});\n    if(emailExist){\n      return res.status(400).send(\"Email Already Exists\");\n    }\n\n    //HASH password\n    var salt = bcrypt.genSaltSync(10);\n    var hash = bcrypt.hashSync(req.body.password, salt);\n\n     let account =new Account({\n       name:req.body.name,\n       password:hash,\n       email:req.body.email\n      });\n\n\n     try {\n       const savedUser= account.save();\n       res.json({message:\"User Sucessfully Saved\"});\n     }catch(err){\n       res.status(400).send(err);\n     }\n\n  });\n\n  api.post('/login',async (req,res)=>{\n    //check if email is correct\n    const user= await Account.findOne({email:req.body.email});\n    if(!user){\n      return res.status(400).send(\"Email is Wrong\");\n    }\n    //check if password is correct\n    const validatePassword= bcrypt.compareSync(req.body.password, user.password);\n    if(!validatePassword){\n      return res.status(400).send(\"Password is Wrong\");\n    }\n    //create and assign tokken\n    const token= jwt.sign({_id:user._id},config.TokenSecret);\n    res.header('auth-token',token).send(token);\n\n  });\n\n\n\n  return api;\n}\n"]}